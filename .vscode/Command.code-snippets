{
	// Place your Twitch-Bot workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Command Boilerplate": {
		"scope": "typescript",
		"prefix": "_command",
		"body": [
			"import OuraBot from '../../Client';",
			"import { CategoryEnum, Channel, Command, CommandReturn } from '../../Typings/Twitch';",
			"import { TwitchPrivateMessage } from '@twurple/chat/lib/commands/TwitchPrivateMessage';",
			"",
			"export const cmd = new (class command implements Command {",
			"\tname = '$TM_FILENAME_BASE';",
			"\tdescription = '$TM_FILENAME_BASE';",
			"\tusage = '$TM_FILENAME_BASE';",
			"\tuserCooldown = ${1:5};",
			"\tchannelCooldown = ${2:5};",
			"\tpermission = ${3:1};",
			"\tcategory = CategoryEnum.${4:Utility};",
			"\texecute = async (ob: OuraBot, user: string, Channel: Channel, args: string[], message: string, msg: TwitchPrivateMessage, alias: string): Promise<CommandReturn> => {",
			"\t\treturn {",
			"\t\t\tsuccess: true,",
			"\t\t\tmessage: \"ppHop\",",
			"\t\t};",
			"\t};",
			"})();",
			""
		]
	}
}
